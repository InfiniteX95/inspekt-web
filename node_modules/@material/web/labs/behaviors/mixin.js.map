{"version":3,"file":"mixin.js","sourceRoot":"","sources":["mixin.ts"],"names":[],"mappings":"AAAA;;;;GAIG","sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * The base class for a mixin with an optional expected base class type.\n *\n * @template ExpectedBase Optional expected base class type, such as\n *     `LitElement`.\n *\n * @example\n * ```ts\n * interface Foo {\n *   isFoo: boolean;\n * }\n *\n * function mixinFoo<T extends MixinBase>(base: T): MixinReturn<T, Foo> {\n *   // Mixins must be `abstract`\n *   abstract class FooImpl extends base implements Foo {\n *     isFoo = true;\n *   }\n *\n *   return FooImpl;\n * }\n * ```\n */\nexport type MixinBase<ExpectedBase = object> = abstract new (\n  // Mixins must have a constructor with `...args: any[]`\n  // tslint:disable-next-line:no-any\n  ...args: any[]\n) => ExpectedBase;\n\n/**\n * The return value of a mixin.\n *\n * @template MixinBase The generic that extends `MixinBase` used for the mixin's\n *     base class argument.\n * @template MixinClass Optional interface of fuctionality that was mixed in.\n *     Omit if no additional APIs were added (such as purely overriding base\n *     class functionality).\n *\n * @example\n * ```ts\n * interface Foo {\n *   isFoo: boolean;\n * }\n *\n * // Mixins must be `abstract`\n * function mixinFoo<T extends MixinBase>(base: T): MixinReturn<T, Foo> {\n *   abstract class FooImpl extends base implements Foo {\n *     isFoo = true;\n *   }\n *\n *   return FooImpl;\n * }\n * ```\n */\nexport type MixinReturn<MixinBase, MixinClass = object> =\n  // Mixins must have a constructor with `...args: any[]`\n  // tslint:disable-next-line:no-any\n  (abstract new (...args: any[]) => MixinClass) & MixinBase;\n"]}